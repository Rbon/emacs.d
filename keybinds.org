#+TITLE: Keybinds
#+PROPERTY: header-args:emacs-lisp :tangle ./keybinds.el
* Miscellaneous
  #+begin_src emacs-lisp
;; escape key stuff
;; make it so you only have to hit ESC once to quit menus. Probably has other pleasant side-effects.
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
(rbon-define-key 'global '(normal visual motion emacs)
  '("<escape>" rbon-escape))

(rbon-define-key 'global 'visual
  '("I" evil-mc-make-cursor-in-visual-selection-beg)
  '("A" evil-mc-make-cursor-in-visual-selection-end))

; cursor shortcuts
(rbon-define-key 'global 'normal
  '("J" rbon-add-cursor-move-down)
  '("K" rbon-add-cursor-move-up)
  '("N" evil-mc-make-and-goto-next-match)
  '("M" evil-mc-make-all-cursors))

(rbon-define-key 'global 'insert '("TAB" dabbrev-expand))
                                        ; tab completion in insert mode
  #+end_src
* Helm
  #+begin_src emacs-lisp
(if (eq system-type 'darwin) ; macOS
    (progn
      (define-key helm-map (kbd "s-j") 'helm-next-line)
      (define-key helm-map (kbd "s-k") 'helm-previous-line))
  (progn
    (define-key helm-map (kbd "C-j") 'helm-next-line)
    (define-key helm-map (kbd "C-k") 'helm-previous-line)))
  #+end_src
* Leader binds
*** Miscellaneous
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC SPC" ("run a command" . helm-M-x))
  '("SPC DEL" ("go to last location" . pop-global-mark)))
  #+end_src
*** Applications  
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC a"   ("applications"))
  '("SPC a d" dired)
  '("SPC a m" magit))
  #+end_src
*** Files
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC f"   ("files"))
  '("SPC f f" ("find a file" . helm-find-files))
  '("SPC f s" ("save this file" . save-buffer))
  '("SPC f r" ("recent files" . helm-recentf))
  '("SPC f b" ("open file browser" . magit-dired-jump))
  '("SPC f c" ("open a user config file" . find-config-file)))
  #+end_src
*** Frame
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC F"   ("frame"))
  '("SPC F c" ("center this frame" . rbon-center-frame))
  '("SPC F m" ("toggle maximized" . toggle-frame-maximized))
  '("SPC F f" ("toggle fullscreen" . toggle-frame-fullscreen)))
  #+end_src
*** Buffers
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC b"     ("buffers"))
  '("SPC b s"   ("save this buffer" . save-buffer))
  '("SPC b c"   ("close this buffer" . kill-this-buffer))
  '("SPC b k"   ("kill this buffer" . kill-this-buffer))
  '("SPC b b"   ("open the buffer list" . helm-buffers-list))
  '("SPC b TAB" ("open last buffer" . my-switch-to-buffer))
  '("SPC b e"   ("eval this buffer" . eval-buffer)))
  #+end_src
*** Eval
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC e"   ("eval"))
  '("SPC e e" ("eval expression" . eval-expression))
  '("SPC e b" ("eval this buffer" . eval-buffer)))
  #+end_src
*** Narrow
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC n"   ("narrow"))
  '("SPC n s" ("narrow to selection" . narrow-to-region))
  '("SPC n w" ("widen" . widen)))
  #+end_src
*** Selection
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC s"   ("selection"))
  '("SPC s a" ("select everything" . mark-whole-buffer)))
  #+end_src
*** Cursors
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC c"          ("cursors"))
  '("SPC c a"        ("add all matches" . evil-mc-make-all-cursors))
  '("SPC c <escape>" ("remove all extra cursors" . evil-mc-undo-all-cursors))
  '("SPC c j"        ("add and go down a line" . rbon-add-cursor-next-line))
  '("SPC c u"        ("undo last cursor" . evil-mc-undo-last-added-cursor))
  '("SPC c n"        ("add next match" . evil-mc-make-and-goto-next-match)))
  #+end_src
*** Help
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC h"   ("help"))
  '("SPC h h" ("describe something" . helm-apropos))
  '("SPC h l" ("list definitions" . helm-imenu))
  '("SPC h k" ("describe a keybind" . describe-key))
  '("SPC h K" ("search keybinds" . helm-descbinds))
  '("SPC h f" ("describe face" . describe-face))
  '("SPC h F" ("describe face" . list-faces-display)))
  #+end_src
*** Window
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC w"   ("window"))
  '("SPC w c" ("close this window" . delete-window))
  '("SPC w f" ("fullscreen this window" . delete-other-windows))
  '("SPC w H" ("split this window horizontally" . split-h-and-change-focus))
  '("SPC w V" ("split this window vertically" . split-window-vertically))
  '("SPC w h" ("move window focus left" . windmove-left))
  '("SPC w l" ("move window focus right" . windmove-right))
  '("SPC w k" ("move window focus up" . windmove-up))
  '("SPC w j" ("move window focus down" . windmove-down)))
  #+end_src
*** Quit
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC q"   ("quit"))
  '("SPC q q" ("quit emacs" . save-buffers-kill-terminal)))
  #+end_src
*** Jump
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC j"   ("jump"))
  '("SPC j d" ("jump to definition" . find-function)))
  #+end_src
*** Org Mode
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC o"   ("org mode"))
  '("SPC o a" ("open the agenda" . org-agenda)))
  #+end_src
*** Workspace
  #+begin_src emacs-lisp
(rbon-define-key 'global '(normal visual emacs)
  '("SPC `"     ("workspace"))
  '("SPC TAB"   ("last used workspace" . eyebrowse-last-window-config))
  '("SPC ` h"   ("previous workspace" . eyebrowse-prev-window-config))
  '("SPC ` l"   ("next workspace" . eyebrowse-next-window-config))
  '("SPC ` TAB" ("last used workspace" . eyebrowse-last-window-config))
  '("SPC ` c"   ("close workspace" . eyebrowse-close-window-config))
  '("SPC ` r"   ("rename workspace" . eyebrowse-rename-window-config))
  '("SPC ` s"   ("switch to workspace..." . eyebrowse-switch-to-window-config))
  '("SPC ` 0"   ("switch to workspace 0" . eyebrowse-switch-to-window-config-0))
  '("SPC 0"     ("switch to workspace 0" . eyebrowse-switch-to-window-config-0))
  '("SPC ` 1"   ("switch to workspace 1" . eyebrowse-switch-to-window-config-1))
  '("SPC 1"     ("switch to workspace 1" . eyebrowse-switch-to-window-config-1))
  '("SPC ` 2"   ("switch to workspace 2" . eyebrowse-switch-to-window-config-2))
  '("SPC 2"     ("switch to workspace 2" . eyebrowse-switch-to-window-config-2))
  '("SPC ` 3"   ("switch to workspace 3" . eyebrowse-switch-to-window-config-3))
  '("SPC 3"     ("switch to workspace 3" . eyebrowse-switch-to-window-config-3))
  '("SPC ` 4"   ("switch to workspace 4" . eyebrowse-switch-to-window-config-4))
  '("SPC 4"     ("switch to workspace 4" . eyebrowse-switch-to-window-config-4))
  '("SPC ` 5"   ("switch to workspace 5" . eyebrowse-switch-to-window-config-5))
  '("SPC 5"     ("switch to workspace 5" . eyebrowse-switch-to-window-config-5))
  '("SPC ` 6"   ("switch to workspace 6" . eyebrowse-switch-to-window-config-6))
  '("SPC 6"     ("switch to workspace 6" . eyebrowse-switch-to-window-config-6))
  '("SPC ` 7"   ("switch to workspace 7" . eyebrowse-switch-to-window-config-7))
  '("SPC 7"     ("switch to workspace 7" . eyebrowse-switch-to-window-config-7))
  '("SPC ` 8"   ("switch to workspace 8" . eyebrowse-switch-to-window-config-8))
  '("SPC 8"     ("switch to workspace 8" . eyebrowse-switch-to-window-config-8))
  '("SPC ` 9"   ("switch to workspace 9" . eyebrowse-switch-to-window-config-9))
  '("SPC 9"     ("switch to workspace 9" . eyebrowse-switch-to-window-config-9))
  '("SPC ` n"   ("new workspace" . eyebrowse-create-window-config)))
                                        #+end_src
* Help
(evil-set-initial-state 'help-mode 'normal)
(rbon-define-key 'help-mode 'normal '("<escape>" quit-window))
#+end_src
* Org
#+begin_src emacs-lisp
(rbon-define-key 'org-mode 'normal
  '("SPC n t" ("narrow to subtree" . org-narrow-to-subtree))
  '("SPC s c" ("make bold" . make-bold))
  '("SPC o s" ("scedule a task" . org-schedule))
  '("SPC o d" ("set a deadline" . org-deadline))
  '("SPC RET" ("insert a heading" . rbon-insert-heading-respect-content)))

(if (eq system-type 'darwin) ; macOS
    (rbon-define-key 'org-mode 'normal
      '("s-i" ("make italic" . make-italic))
      '("s-b" ("make bold" . make-bold))
      '("<s-return>" rbon-insert-heading-respect-content))
    (rbon-define-key 'org-mode 'normal
      '("C-i" ("make italic" . make-italic))
      '("C-b" ("make bold" . make-bold))
      '("<C-return>"  rbon-insert-heading-respect-content)))
 
      #+end_src
* LSP
      #+begin_src emacs-lisp
(rbon-define-key 'lsp-mode 'normal
  '("SPC b f" ("format this buffer" . lsp-format-buffer))
  '("SPC s f" ("format selection" . lsp-format-region))
  '("SPC h h" ("describe something" . lsp-describe-thing-at-point))
  '("SPC j d" ("jump to definition" . lsp-find-definition)))
  #+end_src
* Recentf Dialog
  #+begin_src emacs-lisp
(rbon-define-key 'recentf-dialog-mode 'normal
  '("l" widget-button-press)
  '("h" nop)
  '("q" recentf-cancel-dialog))
  #+end_src
* Org Agenda
  #+begin_src emacs-lisp
(rbon-define-key 'org-agenda-mode 'normal
  '("j" org-agenda-next-line)
  '("k" org-agenda-previous-line)
  '("l" org-agenda-later)
  '("h" org-agenda-earlier))
  #+end_src
* Dired 
  #+begin_src emacs-lisp
(rbon-define-key 'dired-mode 'normal
  '("h" dired-up-directory)
  '("j" dired-next-line)
  '("k" dired-previous-line)
  '("l" dired-find-file)
  '("/" evil-search-forward)
  '("t" touch-file))

  #+end_src
* Haskell 
  #+begin_src emacs-lisp
(rbon-define-key 'haskell-mode 'normal
  '("SPC b e" ("eval this buffer" . run-code)))

(rbon-define-key 'haskell-interactive-mode 'insert
  '("TAB" haskell-interactive-mode-tab)
  '("SPC" haskell-interactive-mode-space))

(rbon-define-key 'haskell-interactive-mode 'normal
  '("J" rbon-haskell-interactive-mode-history-next)
  '("K" rbon-haskell-interactive-mode-history-previous)
  '("I" rbon-insert-haskell-prompt-start)
  '("^" rbon-goto-haskell-prompt-start)
  '("<S-backspace>" rbon-haskell-interactive-mode-kill-whole-line)
  '("RET" haskell-interactive-mode-return))

(rbon-define-key 'haskell-error-mode 'normal '("q" quit-window))
#+end_src
* With Editor 
#+begin_src emacs-lisp
(rbon-define-key 'with-editor-mode 'normal
  '("SPC q f" with-editor-finish)
  '("SPC q c" with-editor-cancel))

  #+end_src
* Magit
  #+begin_src emacs-lisp
(rbon-define-key 'magit-mode 'emacs
  '("J"        magit-status-jump)
  '("j"        magit-next-line)
  '("k"        magit-previous-line)
  '("H"        magit-discard)
  '("<escape>" transient-quit-one))
  #+end_src
